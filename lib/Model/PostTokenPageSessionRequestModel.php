<?php
/**
 * PostTokenPageSessionRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * PostTokenPageSessionRequestModel Class Doc Comment
 *
 * @category    Class
 * @description Represents the information needed to customize a single token via the token page.
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostTokenPageSessionRequestModel implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'attribute_values' => 'map[string,string]',
        'success_url' => 'string',
        'accepted_payment_methods' => 'string[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'attribute_values' => 'attributeValues',
        'success_url' => 'successUrl',
        'accepted_payment_methods' => 'acceptedPaymentMethods'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'attribute_values' => 'setAttributeValues',
        'success_url' => 'setSuccessUrl',
        'accepted_payment_methods' => 'setAcceptedPaymentMethods'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'attribute_values' => 'getAttributeValues',
        'success_url' => 'getSuccessUrl',
        'accepted_payment_methods' => 'getAcceptedPaymentMethods'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $attribute_values Key/value collection of all custom attributes that will eventually be stored with the token.
      * @var map[string,string]
      */
    protected $attribute_values;
    
    /**
      * $success_url The Url to which the user will be redirected upon a token being successfully created.
      * @var string
      */
    protected $success_url;
    
    /**
      * $accepted_payment_methods A white-list of accepted payment methods that should be shown on the token page.
      * @var string[]
      */
    protected $accepted_payment_methods;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->attribute_values = $data["attribute_values"];
            $this->success_url = $data["success_url"];
            $this->accepted_payment_methods = $data["accepted_payment_methods"];
        }
    }
    
    /**
     * Gets attribute_values
     * @return map[string,string]
     */
    public function getAttributeValues()
    {
        return $this->attribute_values;
    }
  
    /**
     * Sets attribute_values
     * @param map[string,string] $attribute_values Key/value collection of all custom attributes that will eventually be stored with the token.
     * @return $this
     */
    public function setAttributeValues($attribute_values)
    {
        
        $this->attribute_values = $attribute_values;
        return $this;
    }
    
    /**
     * Gets success_url
     * @return string
     */
    public function getSuccessUrl()
    {
        return $this->success_url;
    }
  
    /**
     * Sets success_url
     * @param string $success_url The Url to which the user will be redirected upon a token being successfully created.
     * @return $this
     */
    public function setSuccessUrl($success_url)
    {
        
        $this->success_url = $success_url;
        return $this;
    }
    
    /**
     * Gets accepted_payment_methods
     * @return string[]
     */
    public function getAcceptedPaymentMethods()
    {
        return $this->accepted_payment_methods;
    }
  
    /**
     * Sets accepted_payment_methods
     * @param string[] $accepted_payment_methods A white-list of accepted payment methods that should be shown on the token page.
     * @return $this
     */
    public function setAcceptedPaymentMethods($accepted_payment_methods)
    {
        
        $this->accepted_payment_methods = $accepted_payment_methods;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
