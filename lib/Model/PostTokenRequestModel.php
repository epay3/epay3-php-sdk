<?php
/**
 * PostTokenRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * PostTokenRequestModel Class Doc Comment
 *
 * @category    Class
 * @description Creates a payment token.
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostTokenRequestModel implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'payer' => 'string',
        'email_address' => 'string',
        'credit_card_information' => '\Swagger\Client\Model\CreditCardInformationModel',
        'bank_account_information' => '\Swagger\Client\Model\BankAccountInformationModel',
        'attribute_values' => 'map[string,string]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'payer' => 'payer',
        'email_address' => 'emailAddress',
        'credit_card_information' => 'creditCardInformation',
        'bank_account_information' => 'bankAccountInformation',
        'attribute_values' => 'attributeValues'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'payer' => 'setPayer',
        'email_address' => 'setEmailAddress',
        'credit_card_information' => 'setCreditCardInformation',
        'bank_account_information' => 'setBankAccountInformation',
        'attribute_values' => 'setAttributeValues'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'payer' => 'getPayer',
        'email_address' => 'getEmailAddress',
        'credit_card_information' => 'getCreditCardInformation',
        'bank_account_information' => 'getBankAccountInformation',
        'attribute_values' => 'getAttributeValues'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $payer Name of the payer that is storing the token.
      * @var string
      */
    protected $payer;
    
    /**
      * $email_address The email address of the payer.
      * @var string
      */
    protected $email_address;
    
    /**
      * $credit_card_information Used for credit card tokens.
      * @var \Swagger\Client\Model\CreditCardInformationModel
      */
    protected $credit_card_information;
    
    /**
      * $bank_account_information Used for eCheck\\ACH tokens.
      * @var \Swagger\Client\Model\BankAccountInformationModel
      */
    protected $bank_account_information;
    
    /**
      * $attribute_values Dictionary of custom attribute values. The key in the dictionary is the identifier of the custom attribute.
      * @var map[string,string]
      */
    protected $attribute_values;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->payer = $data["payer"];
            $this->email_address = $data["email_address"];
            $this->credit_card_information = $data["credit_card_information"];
            $this->bank_account_information = $data["bank_account_information"];
            $this->attribute_values = $data["attribute_values"];
        }
    }
    
    /**
     * Gets payer
     * @return string
     */
    public function getPayer()
    {
        return $this->payer;
    }
  
    /**
     * Sets payer
     * @param string $payer Name of the payer that is storing the token.
     * @return $this
     */
    public function setPayer($payer)
    {
        
        $this->payer = $payer;
        return $this;
    }
    
    /**
     * Gets email_address
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->email_address;
    }
  
    /**
     * Sets email_address
     * @param string $email_address The email address of the payer.
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        
        $this->email_address = $email_address;
        return $this;
    }
    
    /**
     * Gets credit_card_information
     * @return \Swagger\Client\Model\CreditCardInformationModel
     */
    public function getCreditCardInformation()
    {
        return $this->credit_card_information;
    }
  
    /**
     * Sets credit_card_information
     * @param \Swagger\Client\Model\CreditCardInformationModel $credit_card_information Used for credit card tokens.
     * @return $this
     */
    public function setCreditCardInformation($credit_card_information)
    {
        
        $this->credit_card_information = $credit_card_information;
        return $this;
    }
    
    /**
     * Gets bank_account_information
     * @return \Swagger\Client\Model\BankAccountInformationModel
     */
    public function getBankAccountInformation()
    {
        return $this->bank_account_information;
    }
  
    /**
     * Sets bank_account_information
     * @param \Swagger\Client\Model\BankAccountInformationModel $bank_account_information Used for eCheck\\ACH tokens.
     * @return $this
     */
    public function setBankAccountInformation($bank_account_information)
    {
        
        $this->bank_account_information = $bank_account_information;
        return $this;
    }
    
    /**
     * Gets attribute_values
     * @return map[string,string]
     */
    public function getAttributeValues()
    {
        return $this->attribute_values;
    }
  
    /**
     * Sets attribute_values
     * @param map[string,string] $attribute_values Dictionary of custom attribute values. The key in the dictionary is the identifier of the custom attribute.
     * @return $this
     */
    public function setAttributeValues($attribute_values)
    {
        
        $this->attribute_values = $attribute_values;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
