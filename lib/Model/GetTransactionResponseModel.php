<?php
/**
 * GetTransactionResponseModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * GetTransactionResponseModel Class Doc Comment
 *
 * @category    Class
 * @description Provides details of a transaction.
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetTransactionResponseModel implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'payer' => 'string',
        'email_address' => 'string',
        'transaction_type' => 'string',
        'amount' => 'double',
        'fee' => 'double',
        'payer_fee' => 'double',
        'comments' => 'string',
        'events' => '\Swagger\Client\Model\TransactionEventModel[]',
        'attribute_values' => '\Swagger\Client\Model\AttributeValueModel[]',
        'attachments' => '\Swagger\Client\Model\AttachmentModel[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'payer' => 'payer',
        'email_address' => 'emailAddress',
        'transaction_type' => 'transactionType',
        'amount' => 'amount',
        'fee' => 'fee',
        'payer_fee' => 'payerFee',
        'comments' => 'comments',
        'events' => 'events',
        'attribute_values' => 'attributeValues',
        'attachments' => 'attachments'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'payer' => 'setPayer',
        'email_address' => 'setEmailAddress',
        'transaction_type' => 'setTransactionType',
        'amount' => 'setAmount',
        'fee' => 'setFee',
        'payer_fee' => 'setPayerFee',
        'comments' => 'setComments',
        'events' => 'setEvents',
        'attribute_values' => 'setAttributeValues',
        'attachments' => 'setAttachments'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'payer' => 'getPayer',
        'email_address' => 'getEmailAddress',
        'transaction_type' => 'getTransactionType',
        'amount' => 'getAmount',
        'fee' => 'getFee',
        'payer_fee' => 'getPayerFee',
        'comments' => 'getComments',
        'events' => 'getEvents',
        'attribute_values' => 'getAttributeValues',
        'attachments' => 'getAttachments'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the transaction.
      * @var int
      */
    protected $id;
    
    /**
      * $payer The name of the payer.
      * @var string
      */
    protected $payer;
    
    /**
      * $email_address The email address of the payer.
      * @var string
      */
    protected $email_address;
    
    /**
      * $transaction_type The type of the transaction.
      * @var string
      */
    protected $transaction_type;
    
    /**
      * $amount The total amount of the transaction that was charged to the payer including all fees.
      * @var double
      */
    protected $amount;
    
    /**
      * $fee The transaction fee charged.
      * @var double
      */
    protected $fee;
    
    /**
      * $payer_fee The fee charged to the payer.
      * @var double
      */
    protected $payer_fee;
    
    /**
      * $comments Comments left by the payer at the initial creation of the transaction.
      * @var string
      */
    protected $comments;
    
    /**
      * $events A collection of all events that have occured.
      * @var \Swagger\Client\Model\TransactionEventModel[]
      */
    protected $events;
    
    /**
      * $attribute_values A collection of key/value pairs for any custom attribute values for this transaction.
      * @var \Swagger\Client\Model\AttributeValueModel[]
      */
    protected $attribute_values;
    
    /**
      * $attachments A collection of all attachments for this transaction.
      * @var \Swagger\Client\Model\AttachmentModel[]
      */
    protected $attachments;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->payer = $data["payer"];
            $this->email_address = $data["email_address"];
            $this->transaction_type = $data["transaction_type"];
            $this->amount = $data["amount"];
            $this->fee = $data["fee"];
            $this->payer_fee = $data["payer_fee"];
            $this->comments = $data["comments"];
            $this->events = $data["events"];
            $this->attribute_values = $data["attribute_values"];
            $this->attachments = $data["attachments"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id The unique identifier of the transaction.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets payer
     * @return string
     */
    public function getPayer()
    {
        return $this->payer;
    }
  
    /**
     * Sets payer
     * @param string $payer The name of the payer.
     * @return $this
     */
    public function setPayer($payer)
    {
        
        $this->payer = $payer;
        return $this;
    }
    
    /**
     * Gets email_address
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->email_address;
    }
  
    /**
     * Sets email_address
     * @param string $email_address The email address of the payer.
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        
        $this->email_address = $email_address;
        return $this;
    }
    
    /**
     * Gets transaction_type
     * @return string
     */
    public function getTransactionType()
    {
        return $this->transaction_type;
    }
  
    /**
     * Sets transaction_type
     * @param string $transaction_type The type of the transaction.
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $allowed_values = array("Ach", "Visa", "MasterCard", "Discover", "AmericanExpress", "Jcb");
        if (!in_array($transaction_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'transaction_type', must be one of 'Ach', 'Visa', 'MasterCard', 'Discover', 'AmericanExpress', 'Jcb'");
        }
        $this->transaction_type = $transaction_type;
        return $this;
    }
    
    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->amount;
    }
  
    /**
     * Sets amount
     * @param double $amount The total amount of the transaction that was charged to the payer including all fees.
     * @return $this
     */
    public function setAmount($amount)
    {
        
        $this->amount = $amount;
        return $this;
    }
    
    /**
     * Gets fee
     * @return double
     */
    public function getFee()
    {
        return $this->fee;
    }
  
    /**
     * Sets fee
     * @param double $fee The transaction fee charged.
     * @return $this
     */
    public function setFee($fee)
    {
        
        $this->fee = $fee;
        return $this;
    }
    
    /**
     * Gets payer_fee
     * @return double
     */
    public function getPayerFee()
    {
        return $this->payer_fee;
    }
  
    /**
     * Sets payer_fee
     * @param double $payer_fee The fee charged to the payer.
     * @return $this
     */
    public function setPayerFee($payer_fee)
    {
        
        $this->payer_fee = $payer_fee;
        return $this;
    }
    
    /**
     * Gets comments
     * @return string
     */
    public function getComments()
    {
        return $this->comments;
    }
  
    /**
     * Sets comments
     * @param string $comments Comments left by the payer at the initial creation of the transaction.
     * @return $this
     */
    public function setComments($comments)
    {
        
        $this->comments = $comments;
        return $this;
    }
    
    /**
     * Gets events
     * @return \Swagger\Client\Model\TransactionEventModel[]
     */
    public function getEvents()
    {
        return $this->events;
    }
  
    /**
     * Sets events
     * @param \Swagger\Client\Model\TransactionEventModel[] $events A collection of all events that have occured.
     * @return $this
     */
    public function setEvents($events)
    {
        
        $this->events = $events;
        return $this;
    }
    
    /**
     * Gets attribute_values
     * @return \Swagger\Client\Model\AttributeValueModel[]
     */
    public function getAttributeValues()
    {
        return $this->attribute_values;
    }
  
    /**
     * Sets attribute_values
     * @param \Swagger\Client\Model\AttributeValueModel[] $attribute_values A collection of key/value pairs for any custom attribute values for this transaction.
     * @return $this
     */
    public function setAttributeValues($attribute_values)
    {
        
        $this->attribute_values = $attribute_values;
        return $this;
    }
    
    /**
     * Gets attachments
     * @return \Swagger\Client\Model\AttachmentModel[]
     */
    public function getAttachments()
    {
        return $this->attachments;
    }
  
    /**
     * Sets attachments
     * @param \Swagger\Client\Model\AttachmentModel[] $attachments A collection of all attachments for this transaction.
     * @return $this
     */
    public function setAttachments($attachments)
    {
        
        $this->attachments = $attachments;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
