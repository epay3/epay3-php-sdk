<?php
/**
 * TransactionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api-sandbox.epaypolicy.com:443');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return TransactionsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * transactionsAuthorize
     *
     * Creates an authorization on a credit card.
     *
     * @param \Swagger\Client\Model\PostAuthorizeTransactionRequestModel $post_authorize_transaction_request_model The details of the transaction to be authorized. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsAuthorize($post_authorize_transaction_request_model, $impersonation_account_key = null)
    {
        list($response, $statusCode, $httpHeader) = $this->transactionsAuthorizeWithHttpInfo ($post_authorize_transaction_request_model, $impersonation_account_key);
        return $response; 
    }


    /**
     * transactionsAuthorizeWithHttpInfo
     *
     * Creates an authorization on a credit card.
     *
     * @param \Swagger\Client\Model\PostAuthorizeTransactionRequestModel $post_authorize_transaction_request_model The details of the transaction to be authorized. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsAuthorizeWithHttpInfo($post_authorize_transaction_request_model, $impersonation_account_key = null)
    {
        
        // verify the required parameter 'post_authorize_transaction_request_model' is set
        if ($post_authorize_transaction_request_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_authorize_transaction_request_model when calling transactionsAuthorize');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/transactions/authorize";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));
  
        
        // header params
        
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = $this->apiClient->getSerializer()->toHeaderValue($impersonation_account_key);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($post_authorize_transaction_request_model)) {
            $_tempBody = $post_authorize_transaction_request_model;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'map[string,\Swagger\Client\Model\Object]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transactionsGet
     *
     * Retrieves the details of a transaction.
     *
     * @param int $id The unique identifier of the transaction. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return \Swagger\Client\Model\GetTransactionResponseModel
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsGet($id, $impersonation_account_key = null)
    {
        list($response, $statusCode, $httpHeader) = $this->transactionsGetWithHttpInfo ($id, $impersonation_account_key);
        return $response; 
    }


    /**
     * transactionsGetWithHttpInfo
     *
     * Retrieves the details of a transaction.
     *
     * @param int $id The unique identifier of the transaction. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return Array of \Swagger\Client\Model\GetTransactionResponseModel, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsGetWithHttpInfo($id, $impersonation_account_key = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling transactionsGet');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/transactions/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = $this->apiClient->getSerializer()->toHeaderValue($impersonation_account_key);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\GetTransactionResponseModel'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\GetTransactionResponseModel', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetTransactionResponseModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'map[string,\Swagger\Client\Model\Object]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transactionsPost
     *
     * Processes a sale transaction for either ACH or credit card.
     *
     * @param \Swagger\Client\Model\PostTransactionRequestModel $post_transaction_request_model The details of the transaction to be processed. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsPost($post_transaction_request_model, $impersonation_account_key = null)
    {
        list($response, $statusCode, $httpHeader) = $this->transactionsPostWithHttpInfo ($post_transaction_request_model, $impersonation_account_key);
        $transactionArray = explode("/", $httpHeader["Location"]);
        return $transactionArray[count($transactionArray) - 1]; 
    }


    /**
     * transactionsPostWithHttpInfo
     *
     * Processes a sale transaction for either ACH or credit card.
     *
     * @param \Swagger\Client\Model\PostTransactionRequestModel $post_transaction_request_model The details of the transaction to be processed. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsPostWithHttpInfo($post_transaction_request_model, $impersonation_account_key = null)
    {
        
        // verify the required parameter 'post_transaction_request_model' is set
        if ($post_transaction_request_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_transaction_request_model when calling transactionsPost');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/transactions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));
  
        
        // header params
        
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = $this->apiClient->getSerializer()->toHeaderValue($impersonation_account_key);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($post_transaction_request_model)) {
            $_tempBody = $post_transaction_request_model;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'map[string,\Swagger\Client\Model\Object]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transactionsRefund
     *
     * Processes a refund of a transaction.
     *
     * @param int $id The Id of the transaction. (required)
     * @param \Swagger\Client\Model\PostRefundTransactionRequestModel $post_refund_transaction_request_model The details of how to process the refund. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsRefund($id, $post_refund_transaction_request_model, $impersonation_account_key = null)
    {
        list($response, $statusCode, $httpHeader) = $this->transactionsRefundWithHttpInfo ($id, $post_refund_transaction_request_model, $impersonation_account_key);
        return $response; 
    }


    /**
     * transactionsRefundWithHttpInfo
     *
     * Processes a refund of a transaction.
     *
     * @param int $id The Id of the transaction. (required)
     * @param \Swagger\Client\Model\PostRefundTransactionRequestModel $post_refund_transaction_request_model The details of how to process the refund. (required)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsRefundWithHttpInfo($id, $post_refund_transaction_request_model, $impersonation_account_key = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling transactionsRefund');
        }
        // verify the required parameter 'post_refund_transaction_request_model' is set
        if ($post_refund_transaction_request_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_refund_transaction_request_model when calling transactionsRefund');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/transactions/{id}/refund";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));
  
        
        // header params
        
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = $this->apiClient->getSerializer()->toHeaderValue($impersonation_account_key);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($post_refund_transaction_request_model)) {
            $_tempBody = $post_refund_transaction_request_model;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'map[string,\Swagger\Client\Model\Object]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transactionsVoid
     *
     * Processes a void of a transaction.
     *
     * @param int $id The Id of the transaction. (required)
     * @param \Swagger\Client\Model\PostVoidTransactionRequestModel $post_void_transaction_request_model The details of how to process the void. (required)
     * @param bool $send_receipt [Deprecated. Please use the postVoidTransactionRequestModel parameter.] Set to true if a receipt should be sent to all parties upon a successful void. (optional)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsVoid($id, $post_void_transaction_request_model, $send_receipt = null, $impersonation_account_key = null)
    {
        list($response, $statusCode, $httpHeader) = $this->transactionsVoidWithHttpInfo ($id, $post_void_transaction_request_model, $send_receipt, $impersonation_account_key);
        return $statusCode; 
    }


    /**
     * transactionsVoidWithHttpInfo
     *
     * Processes a void of a transaction.
     *
     * @param int $id The Id of the transaction. (required)
     * @param \Swagger\Client\Model\PostVoidTransactionRequestModel $post_void_transaction_request_model The details of how to process the void. (required)
     * @param bool $send_receipt [Deprecated. Please use the postVoidTransactionRequestModel parameter.] Set to true if a receipt should be sent to all parties upon a successful void. (optional)
     * @param string $impersonation_account_key The key that allows impersonation of another account for which the transaction is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional, default to )
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionsVoidWithHttpInfo($id, $post_void_transaction_request_model, $send_receipt = null, $impersonation_account_key = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling transactionsVoid');
        }
        // verify the required parameter 'post_void_transaction_request_model' is set
        if ($post_void_transaction_request_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_void_transaction_request_model when calling transactionsVoid');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/transactions/{id}/void";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));
  
        // query params
        
        if ($send_receipt !== null) {
            $queryParams['sendReceipt'] = $this->apiClient->getSerializer()->toQueryValue($send_receipt);
        }
        // header params
        
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = $this->apiClient->getSerializer()->toHeaderValue($impersonation_account_key);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($post_void_transaction_request_model)) {
            $_tempBody = $post_void_transaction_request_model;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'map[string,\Swagger\Client\Model\Object]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
