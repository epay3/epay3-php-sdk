<?php
/**
 * TokensFixtureTest
 * PHP version 7.2
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client\Api;

use PHPUnit\Framework\TestCase;
use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;
use Swagger\Client\Api\TokensApi;
use Swagger\Client\Model\PostTokenRequestModel;
use Swagger\Client\Model\CreditCardInformationModel;
use Swagger\Client\Model\AttributeValueModel;
use Swagger\Client\Api\TransactionsApi;
use Swagger\Client\Model\PostTransactionRequestModel;
require_once '../../vendor/autoload.php';

/**
 * TokensFixtureTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokensFixtureTest extends TestCase
{

    private $tokensApi;
    private $transactionsApi;

    /**
     * Prepares the environment before running a test.
     */
    public function setUp()
    {
        parent::setUp();      
		$configuration = new Configuration();
		$configuration->setHost("https://api-sandbox.epaypolicy.com");
		//$configuration->addDefaultHeader("Authorization", "Basic " + base64_encode("3e18c84b5a434c:o0s9p23jsdf22va"));
		//$configuration->addDefaultHeader("Authorization", "Api-Key 82604ac77dee40b5ae8fceea7ef12d3");
		$configuration->addDefaultHeader("Authorization", "Basic M2UxOGM4NGI1YTQzNGM6bzBzOXAyM2pzZGYyMnZh");		
		
		$apiClient = new ApiClient($configuration);
		
        $this->tokensApi = new TokensApi($apiClient);
        $this->transactionsApi = new TransactionsApi($apiClient);
    }
    
    /**
     * Cleans up the environment after running a test.
     */
    public function tearDown()
    {
        $this->tokensApi = null;
        $this->transactionsApi = null;
        parent::tearDown();
    }
    
    
    /**
     * Test case for TokenFixture
     *
     * TBD
     *
     */
    public function testShould_Successfully_Use_A_Token_In_Credit_Card_Transaction() {		
        $postTokenRequestModel = new PostTokenRequestModel();
		$postTokenRequestModel->setPayer("John Doe");
		$postTokenRequestModel->setEmailAddress("jdoe@example.com");
		
		$creditCardInfo = new CreditCardInformationModel();
		$creditCardInfo->setAccountHolder("John Doe");
		$creditCardInfo->setCardNumber("4457119922390123");
		$creditCardInfo->setCvc("123");
		$creditCardInfo->setMonth(12);
		$creditCardInfo->setYear(2019);
		$creditCardInfo->setPostalCode("54321");
		
		$postTokenRequestModel->setCreditCardInformation($creditCardInfo);
        		
        $postTokenRequestModel->setAttributeValues(array(
            'parameter 1' => 'parameter value 1', 
            'parameter 2' => 'parameter value 2')
        );
		
        $tokenId = $this->tokensApi->tokensPost($postTokenRequestModel);
        $tokenResponseModel = $this->tokensApi->tokensGet($tokenId);

        $this->assertTrue($tokenResponseModel != null);

        $this->assertSame(count($tokenResponseModel->getAttributeValues()), 2);
        $attribute1 = $tokenResponseModel->getAttributeValues()[0];
        $attribute2 = $tokenResponseModel->getAttributeValues()[1];
        $this->assertSame($attribute1->getParameterName(), "parameter 1");
        $this->assertSame($attribute1->getValue(), "parameter value 1");
        $this->assertSame($attribute2->getParameterName(), "parameter 2");
        $this->assertSame($attribute2->getValue(), "parameter value 2");
        
        $this->assertTrue($tokenId != null);

        $postTransactionRequestModel = new PostTransactionRequestModel();
        $postTransactionRequestModel->setPayer("John Smith");
        $postTransactionRequestModel->setEmailAddress("jsmith@example.com");
        $postTransactionRequestModel->setAmount(871.33);
        $postTransactionRequestModel->setTokenId($tokenId);
        $postTransactionRequestModel->setComments("Sample Comments");
        $postTransactionRequestModel->setSendReceipt(false);

        $transactionId = $this->transactionsApi->transactionsPost($postTransactionRequestModel);
        $this->assertTrue($transactionId > 0);
    }
}